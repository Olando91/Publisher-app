@using MudBlazor
@using Publisher_GUI.Data.Forms
@using Publisher_GUI.Data.Requests
@using Publisher_GUI.Data.Services
@using Publisher_GUI.Models.Artist;
@using Publisher_GUI.Models.Cover
@inject ArtistService _artistService
@inject CoverService _coverService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Class="text-center" Align="Align.Center">Remove artist from Cover</MudText>
    </TitleContent>

    <DialogContent>

        <MudSelect T="Guid" @bind-Value="request.ArtistId" Label="Select Artist" Required="true" Placeholder="Vælg en artist" ToStringFunc="converter" Disabled="Artists.Count == 1">
            @foreach (var artist in Artists)
            {
                <MudSelectItem T="Guid" Value="artist.Id">@artist.FullName()</MudSelectItem>
            }
        </MudSelect>

        <MudText Typo="Typo.body2" Color="Color.Error">@ValidationMessage</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Create" Disabled="Artists.Count == 1">Remove Artist</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="Close">Cancel</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public Cover Cover { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    private RemoveArtistFromCoverRequest request = new();
    private List<Artist> Artists = new();
    private string ValidationMessage { get; set; }

    Func<Guid, string> converter = i => i == Guid.Empty ? "Vælg Artist" : "Vælg Artist";

    protected override async Task OnInitializedAsync()
    {
        var result = await _artistService.GetAllArtists();
        Artists = result.Where(x => x.Covers.Any(c => c.Id != Cover.Id)).ToList();
        if (Artists.Count == 1)
            ValidationMessage = "Der skal være mindt 1 artist på et cover";
        request.CoverId = Cover.Id;
    }

    private void Close()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task Create()
    {
        if (request.ArtistId == Guid.Empty)
        {
            ValidationMessage = "Der skal vælges 1 artist";
            return;
        }

        await _coverService.RemoveArtistFromCover(request);
        var snackbarMessage = "Artist fjernet fra cover";
        Snackbar.Add(snackbarMessage, Severity.Success);
        MudDialog.Close();
    }
}